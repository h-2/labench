#!/bin/sh
#
# labench -- the Local Aligner BENCHmark
#   version 0.1
#   (c) 2016 Hannes Hauswedell, Freie Universität Berlin
#   licensed under the MIT license
#   see https://github.com/h-2/labench for more details
#

getCharmap()
{
    case $(uname) in
        "Darwin")
            CHARMAP=notutf8
            ;;
        "FreeBSD")
            #depends on version
            if [ $(uname -r | awk -F\\. '{ print$1 }') -lt 11 ]; then
                CHARMAP=notutf8
            else
                CHARMAP=$(locale charmap)
            fi
            ;;
        * )
            CHARMAP=$(locale charmap)
            ;;
    esac
}

usage()
{
    echo "labench -- the Local Aligner BENCHmark"
    echo "======================================"
    echo ""
    echo "USAGE: labench show-profiles"
    echo "       labench run [config.sh]"
    echo ""
    echo "show-profiles"
    echo "-------------"
    echo ""
    echo "lists the available modules and profiles"
    echo ""
    echo "run"
    echo "---"
    echo ""
    echo "You must define some environment variables or pass a config script"
    echo "that will be sourced (and provides them)."
    echo ""
    echo "Mandatoriy variables:"
    echo " QUERY_FA         path to the query file (fasta)"
    echo " DATABASE_FA      path to the database file (fasta)"
    echo " MODPROFS         space-seperated list of colon-seperated module:profile pairs"
    echo ""
    echo "Optional variables:"
    echo " PROGRAMMODE      BLASTN BLASTP BLASTX TBLASTN TBLASTX (default is BLASTX)"
    echo " MAXDBENTRIES     maximum number of hits per query sequence, defaults to 256"
    echo " TODO"
    echo ""
    echo ""
    echo "about"
    echo "-----"
    echo ""
    echo "version 0.1"
    echo "(c) 2016 Hannes Hauswedell, Freie Universität Berlin"
    echo "licensed under the MIT license"
    echo "see https://github.com/h-2/labench for more details"
}

cleanup()
{
    if [ ${DEBUG:+x} ]; then
        echo "YOU ARE IN DEBUG MODE SO ${TMPDIR} was not cleaned up!"
    else
        rm -r "${TMPDIR}"
    fi
}

# exit whenever a simple command returns non-zero
set -e

# error when reading from an undefined variable
set -u

# see if we support UTF8 before sanitizing
getCharmap
# sanatize environment so all tools behave correctly
unset LC_ALL
unset LANG
LC_CTYPE="C"
LC_COLLATE="C"
LC_TIME="C"
LC_NUMERIC="C"
LC_MONETARY="C"
LC_MESSAGES="C"

# check number of args
if [ $# -gt 2 ]; then
    echo "ERROR: wrong number of arguments" > /dev/stderr
    echo "--------------------------------" > /dev/stderr
    usage
    exit 127
fi

BENCHDIR="$(readlink -f $(dirname "$0"))"

# source default config
. "${BENCHDIR}/config/default.sh"

# two arguments
if [ $# -eq 2 ]; then
    if [ "$1" != "run" ]; then
        echo "ERROR: wrong arguments" > /dev/stderr
        echo "----------------------" > /dev/stderr
        usage
        exit 127
    fi
    if [ ! -r "$2" ]; then
        echo "ERROR: config file doesn't exist or not readable." > /dev/stderr
        echo "-------------------------------------------------" > /dev/stderr
        usage
        exit 127
    fi
    # source the config given as argument
    . "$2"
fi

# one argument
if [ $# -eq 1 ]; then
    if [ "$1" = "show-profiles" ]; then
        . "${BENCHDIR}/src/show_profiles.sh"
        show_profiles
        exit 0
    fi
    if [ "$1" != "run" ]; then
        echo "ERROR: wrong arguments" > /dev/stderr
        echo "----------------------" > /dev/stderr
        usage
        exit 127
    fi
fi

# check validity of input files
if [ ! -r ${QUERY_FA} ]; then
  echo "ERROR: query file doesn't exist or not readable" > /dev/stderr
  echo "-----------------------------------------------" > /dev/stderr
  echo "$QUERY_FA"
  usage
  exit 127
fi
if [ ! -r "$DATABASE_FA" ]; then
  echo "ERROR: database file doesn't exist or not readable" > /dev/stderr
  echo "--------------------------------------------------" > /dev/stderr
  echo "$DATABASE_FA"
  usage
  exit 127
fi

# for safety regions always create a TMPDIR inside TMPDIR (we will delete this later)
TMPDIR="${TMPDIR}/labench-$$"

# check validity of tmpdir and outputdir
for DIR in "${TMPDIR}" "${OUTDIR}"; do
    if [ -d "$DIR" ]; then
    echo "ERROR: output or tmp directory already exist" > /dev/stderr
    echo "--------------------------------------------" > /dev/stderr
    usage
    exit 127
    else
        mkdir -p "$DIR"
        if [ $? -ne 0 ]; then
            echo "ERROR: output or tmp directory could not be created" > /dev/stderr
            echo "---------------------------------------------------" > /dev/stderr
            usage
            exit 127
        fi
    fi
done

# sanatize variables
QUERY_FA=$(readlink -f "${QUERY_FA}")
DATABASE_FA=$(readlink -f "${DATABASE_FA}")
OUTDIR=$(readlink -f "${OUTDIR}")
EVALUE_ACTUAL=$(echo $EVALUE | awk ' {print $1 * 100}') # make sure that initial cutoff is more lenient
PROGRAMMODE=$(echo "$PROGRAMMODE" | tr '[:upper:]' '[:lower:]')

# catch interrupts and terms
trap 'cleanup' 0 1 2 3 15

# make sure required variables are set
if [ -z ${MODPROFS:+x} ]; then
  echo "ERROR: MODPROFS variable not set but required" > /dev/stderr
  echo "---------------------------------------------" > /dev/stderr
  usage
  exit 127
fi
case $PROGRAMMODE in
    "blastn" | "blastp" | "blastx" | "tblastn" | "tblastx" )
        ;;
    * )
        echo "ERROR: PROGRAMMODE variable not set or set falsely " > /dev/stderr
        echo "---------------------------------------------------" > /dev/stderr
        usage
        exit 127
        ;;
esac

# load all required functions
OLD_IFS=$IFS
IFS='
'
for s in $(ls "${BENCHDIR}"/src/*.sh); do
    . "${s}"
done
IFS=${OLD_IFS}

# these are the modules
MODULES=`ls ${BENCHDIR}/modules`

if [ ${DEBUG:+x} ]; then
    echo "# VARIABLES defined:"
    echo "#  BENCHDIR       : ${BENCHDIR}"
    echo "#  QUERY_FA       : ${QUERY_FA}"
    echo "#  DATABASE_FA    : ${DATABASE_FA}"
    echo "#  MODPROFS       : ${MODPROFS}"
    echo "#  TMPDIR         : ${TMPDIR}"
    echo "#  OUTDIR         : ${OUTDIR}"
    echo "#  MODULES        : ${MODULES}"
    echo "#  EVALUE         : ${EVALUE}"
    echo "#  MAXDBENTRIES   : ${MAXDBENTRIES}"
fi

# deactivate dynamic cpu frequency scaling
setCpuFreqFixed

# create the indexes
create_indexes

# # run the benchmark
run_benchmark
#
# # write report
create_report

# reactivate dynamic cpu frequency scaling
setCpuFreqOnDemand
